#!/usr/bin/ruby

require 'optparse'
require 'ostruct'

module ConfParser
	DEBUG = false

	PARSERS = {
		:force         => ->(value){ value == 'true' },
		:preserve_env  => ->(value){ value == 'true' },
		:poll_interval => ->(value){ value.to_f },
		:max_wait      => ->(value){ value.to_i }
	}

	def self.parse_key_value(key,value)
		parser = PARSERS[key]

		return parser.call(value) if parser

		return value
	end

	def self.parse_file(path)
		self.parse(File.open(path).read)
	end

	def self.parse(conf_string)
		lines = conf_string.split("\n")


		targets = {}

		current_target = nil

		lines.each do |line|
			# ignore comments and empty lines
			next if line =~ /(^\s*#|^\s*$)/

			# target match definition
			if line =~ /^\[/ && line =~ /\]$/
				line.strip!

				if line == '[global]'
					target = 'global'
				else
					target = []

					until line.empty? do
						# matches = []
						pattern = /\[([\w\-]+)=/
						matches = pattern.match(line)
						line.slice!(pattern) # make sure to remove it

						match_condition = {
							:attribute    => matches[1].gsub('-','_').to_sym,
							:pattern_type => nil,
							:pattern      => nil
						}

						if line.start_with?('/')
							pattern_type = :regex
							pattern = /\/(.*)\/\]/
							matches = pattern.match(line)
							line.slice!(pattern)
						elsif line.start_with?('"')
							pattern_type = :glob
							pattern = /"(.*)"\]/
							matches = pattern.match(line)
							line.slice!(pattern)
						elsif line.start_with?("'")
							pattern_type = :string
							pattern = /'(.*)'\]/
							matches = pattern.match(line)
							line.slice!(pattern)
						else
							raise "Unable to parse pattern for #{attribute}"
						end

						match_condition[:pattern_type] = pattern_type
						match_condition[:pattern]      = matches[1]

						target.push(match_condition)
					end
				end

				current_target = target
				targets[current_target] = {}

				puts "TARGET: #{current_target}" if DEBUG

			# key/value settings
			elsif matches = /^(\s{3,}|\t)([\w\-]+):\s*(.+)\s*$/.match(line)
				# puts "Found key value: #{line}\n#{matches}"

				raise "Missing target!" unless current_target

				key   = matches[2].gsub('-','_').to_sym
				value = self.parse_key_value(key,matches[3])

				puts "        KEY: #{key}, VALUE: #{value}" if DEBUG

				targets[current_target][key] = value
			else
				raise "Unable to parse line!\n#{line}"
			end
		end

		conf_options = {
			:global  => {},
			:targets => {}
		}

		if targets.has_key?('global')
			conf_options[:global] = targets.delete('global')
		end

		conf_options[:targets] = targets

		return conf_options
	end
end

class X11Window
	attr_reader :id, :process_name, :app_name, :pid, :title

	def initialize(options)
		options.each { |k,v| instance_variable_set("@#{k}", v) }

		@closed = false
	end

	def closed?
		return true if @closed

		begin
			Process.getpgid(@pid)
			false
		rescue Errno::ESRCH
			@closed = true
			true
		end
	end

	def kill
		system("kill -9 #{@pid}")
	end

	def close
		system({
			"WINDOW_ID"  => @id.to_s,
			"WINDOW_PID" => @pid.to_s
		}, @close_command)
	end

	def open?
		return ! @closed
	end

	def wait_until_close
		max_polls = (@max_wait/@poll_interval).to_i

		wait_thread = Thread.new {
			max_polls.times do
				sleep @poll_interval

				if closed?
					break
				end
			end
		}

		wait_thread.join(@max_wait);
	end
end

class X11WindowCloser
	def initialize
		# default settings
		@options = {
			:simulate         => false,
			:force            => false,
			:poll_interval    => 0.5,
			:max_wait         => 5,
			:verbose          => false
		}

		# get cli options
		update_options()
		puts "=====================\n    SIMULATING\n=====================" if @options[:simulate]
		puts_debug "CLI OPTIONS:", @options

		# conf file options
		@config_options = load_config_options()
		puts_debug "CONFIG OPTIONS:", @config_options
	end

	def puts_debug(*args)
		puts *args if @options[:verbose]
	end

	def update_options
		opt_parser = OptionParser.new do |opts|
			opts.on("--force", "Kill all windows that remain open after",
			                   "waiting for them to terminate gracefully.\n\n"
			) do
				@options[:force] = true
			end

			opts.on("--simulate", "Test running the script without actually",
			                   "closing any windows. Usefull for debugging",
			                   "or for trying out sensitive settings.\n\n"
			) do
				@options[:simulate] = true
			end

			opts.on("--only [x,y,z]", Array, "Narrow down the windows to be closed by",
			                                 "comma separated list of PIDs.\n\n"
			) do |pids|
				@options[:only] = pids.map{|pid| pid.to_i}
			end

			opts.on("--max-wait val", Integer, "Set the max amount of time in seconds to",
			                                   "wait for windows to close.",
			                                   "Default is 5 seconds.\n\n"
			) do |seconds|
				@options[:max_wait] = seconds
			end

			opts.on("--poll-interval val", Float, "Set poll interval in seconds.",
			                                      "Default is 0.5 seconds.\n\n"
			) do |seconds|
				@options[:poll_interval] = seconds
			end

			opts.on("--verbose", "Print debug information.") do
				@options[:verbose] = true
			end

			opts.on("--use-config path", String, "Path to config file.") do |path|
				@options[:use_config] = path
			end

			opts.on("--except [x,y,z]", Array, "Exclude windows from being closed.",
			                                   "Comma separated list of PIDs.\n\n"
			) do |pids|
				@options[:except] = pids.map{|pid| pid.to_i}
			end

			opts.on("--help", "Print help text.") do |pids|
				puts opts
				abort
			end
		end

		begin
			opt_parser.order!(ARGV)
		rescue Exception => e
			puts_debug "PARSE ERROR", e
			abort("Invalid commandline options!")
		end
	end

	def load_config_options()
		config_options = nil

		local_conf_path     = '~/.config/close-all-windows/close-all-windows.conf'
		alt_local_conf_path = '~/.close-all-windows.conf'
		system_conf_path    = '/etc/close-all-windows.conf'

		local_conf     = File.exists?(local_conf_path) ? local_conf_path : nil
		alt_local_conf = File.exists?(alt_local_conf_path) ? alt_local_conf_path : nil
		system_conf    = File.exists?(system_conf_path) ? system_conf_path : nil

		conf_path =
			@options[:use_config] ||
			local_conf ||
			alt_local_conf ||
			system_conf

		begin
			config_options = ConfParser.parse_file(conf_path) if conf_path
		rescue Exception => e
			puts_debug("PARSE ERROR:", e)
			abort("Failed to parse config file at:\n #{conf_path}")
		end

		return config_options
	end

	def match_pattern(match_obj, string)
		pattern_type = match_obj[:pattern_type]
		pattern      = match_obj[:pattern]

		case pattern_type
		when :glob
			File.fnmatch(pattern, string)
		when :regex
			Regexp.new(pattern).match(string)
		when :string
			pattern == string
		else
			raise "Unkown pattern type '#{pattern_type}'"
		end
	end

	def target_matches_window?(target, window_options)
		target.each do |condition|
			window_attribute_value = window_options[condition[:attribute]]

			return false unless match_pattern(condition, window_attribute_value)
		end
		puts_debug "Found match: #{target} #{window_options}"
		return true
	end

	def merge_config_options(window_options)
		window_options = window_options.merge(@config_options[:global])

		@config_options[:targets].each do |target, window_conf_options|
			if target_matches_window?(target, window_options)
				window_options = window_options.merge(window_conf_options)
				break
			end
		end

		return window_options
	end

	def get_open_windows
		windows = []

		puts_debug "WINDOWS:"

		`wmctrl -lp`.split("\n").each do |line|
			line_array = line.split(/\s+/)

			id    = line_array.shift.to_i(16) # from hex to int
			line_array.shift              # 1 remove unkown element
			pid   = line_array.shift.to_i # 2
			line_array.shift              # 3 remove unkown element
			title = line_array.join(' ')  # 4 join the rest

			# for some windows
			# wmctrl can't determine
			# the window id or pid
			# e.g. steam
			# check `ps -A | grep steam`
			# possible steam client runs
			# outside of window manager
			# possibly solveable via specific
			# application extensions
			# or other window lookup/polling method
			next if pid == 0

			# filter windows
			next if @options[:except] && @options[:except].include?(pid)
			next if @options[:only] && ! @options[:only].include?(pid)


			process_name = ''
			app_name     = ''

			process_name = `ps -fwwp #{pid} | tail -n 1`.split(" ")[7] unless pid == 0

			if process_name != ''
				desktop_file = "/usr/share/applications/#{process_name}.desktop"
				app_name     = `cat #{desktop_file} | grep Name= | head -n 1 | cut -d= -f 2`.strip if File.exists?(desktop_file)
			end

			window_options = {
				:id              => id,
				:process_name    => process_name,
				:process_command => process_name,
				:app_name        => app_name,
				:pid             => pid,
				:title           => title,
				:poll_interval   => @options[:poll_interval],
				:max_wait        => @options[:max_wait],
				:shell           => '/bin/bash',
				:close_command   => 'wmctrl -ic $WINDOW_ID'
			}

			window_options = merge_config_options(window_options)

			puts_debug window_options

			windows << X11Window.new(window_options)
		end

		return windows
	end

	def all_windows_closed?(windows)
		windows.each do |win|
			return false unless win.closed?
		end

		return true;
	end

	# takes array of X11Window objects
	# and a block that tries to close
	# the window
	#
	def close_windows_and_wait(windows, &block)
		close_threads = []

		windows.each do |win|
			next if win.closed?

			close_threads << Thread.new {
				# block passes in the close command
				puts_debug "Closing (#{win.pid}) #{win.process_name}: #{win.app_name}"
				block.call(win) unless @options[:simulate]
				win.wait_until_close

				if win.closed?
					puts_debug "CLOSED  (#{win.pid}) #{win.process_name}: #{win.app_name}"
				else
					puts_debug "FAILED  close (#{win.pid}) #{win.process_name}: #{win.app_name}"
				end
			}
		end

		close_threads.each{|t|
			t.join()
		}
	end

	def close_all_windows
		open_windows = get_open_windows()

		# load config
		# with custom close command

		# gently close windows
		close_windows_and_wait(open_windows) do |win|
			# run custom close command here
			win.close
		end

		# kill remaining windows
		if @options[:force]
			puts_debug "Trying to kill now"

			close_windows_and_wait(open_windows) do |win|
				win.kill
			end
		end

		if all_windows_closed?(open_windows)
			exit(0)
		end

		warn "Closing all windows failed."
		exit(1)
	end
end

X11WindowCloser.new.close_all_windows()